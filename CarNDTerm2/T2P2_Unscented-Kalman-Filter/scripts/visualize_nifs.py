import re
import os
import argparse
import matplotlib.pyplot as plt

# Args
argparser = argparse.ArgumentParser(
    description="Retrain or 'fine-tune' a pretrained YOLOv2 model for your own data.")

argparser.add_argument(
    '-i',
    '--input_log_path',
    help="path to the log generated by UKF",
    default='~/udacity_carnd/CarNDTerm2/T2P2_Unscented-Kalman-Filter/build/nis.log')

def _plot_nis(nis_data, threshold_95, sensor_name=None):
    plt.close()
    plt.plot(nis_data, label=sensor_name + ' NIS')
    plt.axhline(y=threshold_95, color='r', linestyle='-', label='95% Chi-squre')
    plt.legend()
    plt.savefig(sensor_name+'_nis.png') 

def _main(args):
    log_path = os.path.expanduser(args.input_log_path)
    # regex for laser and radar nis
    re_laser = r'LaserNIS\:(\d+(\.\d+)?)'
    re_radar = r'RadarNIS\:(\d+(\.\d+)?)'

    if not os.path.exists(log_path):
        print('Invalid input log path')
        return

    NIS_laser = []
    NIS_radar = []
    with open(log_path) as f:
        lines = f.readlines()
        for line in lines:
            line = line.rstrip()
            m1 = re.match(re_laser, line)
            m2 = re.match(re_radar, line)
            if m1:
                NIS_laser.append(float(m1.group(1)))
                # print('laser', float(m1.group(1)))
            elif m2:
                NIS_radar.append(float(m2.group(1)))
                # print('radar', float(m2.group(1)))
    _plot_nis(NIS_laser, 5.9915, 'Laser')
    _plot_nis(NIS_radar, 7.8147, 'Radar')
    return

if __name__ == '__main__':
    args = argparser.parse_args()
    _main(args)
